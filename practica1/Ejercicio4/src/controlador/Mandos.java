/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package controlador;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import ejercicio4.Cliente;
import vista.Salpicadero;

/**
 *
 * @author carme
 */
public class Mandos extends javax.swing.JPanel implements Runnable {

    private EstadoMotor comandoActual;
    private Cliente cliente;
    private Salpicadero salpicadero;
    private static final ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();

    /**
     * Creates new form Mandos
     */
    public Mandos(Cliente cliente, Salpicadero salpicadero) {
        this.cliente = cliente;
        this.salpicadero = salpicadero;
        comandoActual = EstadoMotor.APAGADO;
        // Usamos un scheduler para que se mande una petici√≥n cada segundo
        executorService.scheduleAtFixedRate(this, 0, 1, TimeUnit.SECONDS);
        initComponents();
    }

    @Override
    public void run() {
        cliente.peticionGestorFiltros(comandoActual);
        salpicadero.actualizar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonEncendido = new javax.swing.JButton();
        botonAcelerador = new javax.swing.JButton();
        botonFreno = new javax.swing.JButton();
        estado = new javax.swing.JLabel();

        botonEncendido.setText("ENCENDER");
        botonEncendido.setForeground(new java.awt.Color(0, 255, 0));
        botonEncendido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEncendidoActionPerformed(evt);
            }
        });

        botonAcelerador.setText("ACELERAR");
        botonAcelerador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceleradorActionPerformed(evt);
            }
        });

        botonFreno.setText("FRENAR");
        botonFreno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFrenoActionPerformed(evt);
            }
        });

        estado.setText("APAGADO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(estado, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(botonEncendido)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(botonAcelerador)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(botonFreno)))
                                .addContainerGap(73, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(60, Short.MAX_VALUE)
                                .addComponent(estado, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(botonEncendido)
                                        .addComponent(botonAcelerador)
                                        .addComponent(botonFreno))
                                .addGap(60, 60, 60)));
    }

    private void botonEncendidoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botonEncendidoActionPerformed
        if (botonEncendido.isSelected()) {
            estado.setText("APAGADO");
            botonEncendido.setForeground(new java.awt.Color(0, 255, 0));
            botonEncendido.setText("ENCENDER");
            botonEncendido.setSelected(false);
            resetFreno();
            resetAcelerador();
            comandoActual = EstadoMotor.APAGADO;
        } else {
            estado.setText("ENCENDIDO");
            botonEncendido.setForeground(new java.awt.Color(255, 0, 0));
            botonEncendido.setText("APAGAR");
            botonEncendido.setSelected(true);
            comandoActual = EstadoMotor.ENCENDIDO;
        }
    }// GEN-LAST:event_botonEncendidoActionPerformed

    private void botonAceleradorActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botonAceleradorActionPerformed
        // Solamente se entra si no esta el freno activado y el coche esta encendido
        if (!botonFreno.isSelected() && botonEncendido.isSelected()) {
            // Primer caso: Encendido y pulsado
            if (botonAcelerador.isSelected()) {
                botonAcelerador.setText("ACELERAR");
                botonAcelerador.setForeground(new java.awt.Color(0, 0, 0));
                estado.setText("ENCENDIDO");
                botonAcelerador.setSelected(false);
                comandoActual = EstadoMotor.ENCENDIDO;
            }

            // Segundo caso: Soltado Acelerador
            else {
                botonAcelerador.setText("Soltar Acelerador");
                botonAcelerador.setForeground(new java.awt.Color(255, 0, 0));
                estado.setText("ACELERANDO");
                botonAcelerador.setSelected(true);
                comandoActual = EstadoMotor.ACELERANDO;
            }
        }

        // Es necesario resetear el boton del acelerador porque se queda presionado
    }// GEN-LAST:event_botonAceleradorActionPerformed

    private void botonFrenoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_botonFrenoActionPerformed
        // Solamente se entra si no esta el acelerador activado y el coche esta
        // encendido
        if (!botonAcelerador.isSelected() && botonEncendido.isSelected()) {

            // Primer caso: Freno pulsado
            if (botonFreno.isSelected()) {
                botonFreno.setText("FRENAR");
                botonFreno.setForeground(new java.awt.Color(0, 0, 0));
                estado.setText("ENCENDIDO");
                botonFreno.setSelected(false);
                comandoActual = EstadoMotor.ENCENDIDO;
            }

            // Segundo caso: Soltado Freno
            else {
                botonFreno.setText("Soltar Freno");
                botonFreno.setForeground(new java.awt.Color(255, 0, 0));
                estado.setText("FRENANDO");
                botonFreno.setSelected(true);
                comandoActual = EstadoMotor.FRENANDO;
            }
        }
        // En caso de no cumplirse se resetea el estado del boton
    }// GEN-LAST:event_botonFrenoActionPerformed

    private void resetFreno() {
        botonFreno.setText("FRENAR");
        botonFreno.setForeground(new java.awt.Color(0, 0, 0));
        botonFreno.setSelected(false);
    }

    private void resetAcelerador() {
        botonAcelerador.setText("ACELERAR");
        botonAcelerador.setForeground(new java.awt.Color(0, 0, 0));
        botonAcelerador.setSelected(false);
    }

    public EstadoMotor getComandoActual() {
        return comandoActual;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAcelerador;
    private javax.swing.JButton botonEncendido;
    private javax.swing.JButton botonFreno;
    private javax.swing.JLabel estado;
    // End of variables declaration//GEN-END:variables
}
